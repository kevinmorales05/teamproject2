@page "/wishlist"

@using Microsoft.EntityFrameworkCore
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Authorization
@using Team2Project.Models
@inject NavigationManager NavigationManager
@inject WishlistService WishlistService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext

<PageTitle>Wish List</PageTitle>

<h1>Wish List</h1>

<!-- Search Bar -->
<div class="search-container">
    <input @bind="searchQuery" placeholder="Search for a book..." class="search-input" />
</div>

<!-- Suggestions Area -->
<h4>Suggestions</h4>
<div class="suggestions-container">
    @foreach (var book in SuggestedBooks)
    {
        <div class="suggestion-card">
            <button @onclick="() => AddToWishlist(book.Id)">Add to Wishlist</button>
            <span>@book.Name by @book.Author</span>
        </div>
    }
</div>

<div class="app-layout">

    <!-- Wishlist Library -->
    <h2>Wishlist</h2>
    <div class="wishlist-container">
        @if (wishlistBooks.Count == 0)
        {
            <p>No books in wishlist.</p>
        }
        else
        {
            <div class="book-grid">
                @foreach (var book in wishlistBooks)
                {
                    <div class="wishlist-card">
                        <!-- <img src="images/@book.Name.Replace(" ", "-").ToLower().Trim().Replace(".", "") + ".jpg" alt="@book.Name" class="book-image"/> -->
                        <div class="book-info">
                            <h3>@book.Name</h3>
                            <p><strong>Author:</strong> @book.Author</p>
                            <p><strong>Published:</strong> @book.PublicationDate.ToString("MMMM dd, yyyy")</p>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

</div>

@code {
    private string searchQuery = string.Empty;
    private List<Book> books = new List<Book>();
    private List<Book> wishlistBooks = new List<Book>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask {get; set;}

    @* private int accountId = 1; // Replace with the actual logged-in user's AccountId *@

     protected override async Task OnInitializedAsync()
    {
        var accountId = await GetAccountId();
        // Check to see if a user is logged in
        wishlistBooks = WishlistService.GetWishlistBooks(accountId);
    

        books = await DbContext.Books.ToListAsync();
        // Check to see if a user is logged in
        wishlistBooks = WishlistService.GetWishlistBooks(accountId);


    }

    // Filtered books based on search query
    private IEnumerable<Book> FilteredBooks =>
    string.IsNullOrEmpty(searchQuery)
            ? books
            : books.Where(b => b.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) 
                            || b.Author.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

    // Suggested books, filtered based on search query
    private IEnumerable<Book> SuggestedBooks =>
        string.IsNullOrEmpty(searchQuery)
            ? books // Display all books if search is empty
            : books.Where(b => b.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) 
                            || b.Author.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

    // Add book to wishlist if not already present
    private async Task AddToWishlist(Guid bookId)
    {
        // Get the authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is authenticated
        if (!user.Identity.IsAuthenticated)
        {
            // Redirect to login or show a message
            NavigationManager.NavigateTo("/login");
            return;
        }
        // Proceed with adding to wishlist if the user is authenticated
        if (!wishlistBooks.Any(b => b.Id == bookId))
        {
            var accountId = await GetAccountId();
            await WishlistService.AddToWishlist(accountId, bookId); // Add to database
            wishlistBooks = WishlistService.GetWishlistBooks(accountId); // Refresh wishlist
        }
    }

    public async Task<int> GetAccountId() 
    {
        var authState = await authenticationStateTask;
        var accountIdClaim = authState.User.FindFirst("AccountId");
        if (accountIdClaim != null)
        {
            return int.Parse(accountIdClaim.Value);
        }
        else{
            NavigationManager.NavigateTo("/login");
            return -1;
        }
    }
}